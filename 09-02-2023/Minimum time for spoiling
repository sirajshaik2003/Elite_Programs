// Minimum time for spoiling

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int row = sc.nextInt();
        int col = sc.nextInt();
        int[][] matrix = new int[row][col];
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                matrix[i][j] = sc.nextInt();
            }
        }
        int res = Minimum_time_for_spoiling(matrix,row,col);
        System.out.println(res);
    }
    
    private static int Minimum_time_for_spoiling(int[][] matrix,int row,int col){
        if(matrix.length==0 || matrix==null){
            return -1;
        }
        
        int min = 2;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(matrix[i][j]==2){
                    dfs(matrix,i,j,min);
                }
            }
        }
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(matrix[i][j]==1){
                    return -1;
                }
                else{
                    min = Math.max(matrix[i][j],min);
                }
            }
        }
        return min-2;
    }
    
    private static void dfs(int[][] matrix,int i,int j,int min){
        if(i<0 || j<0 || i>=matrix.length || j>=matrix[0].length || matrix[i][j]==0 || (matrix[i][j]>1 && matrix[i][j]<min)){
            return;
        }
        matrix[i][j] = min;
        dfs(matrix,i+1,j,min+1);
        dfs(matrix,i,j+1,min+1);
        dfs(matrix,i-1,j,min+1);
        dfs(matrix,i,j-1,min+1);
    }
}
