// Binary Tree Paths

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> list = new ArrayList<>();
        if(root==null){
            return list;
        }
        String path = Integer.toString(root.val);
        if(root.left==null && root.right==null){
            list.add(path);
        }
        if(root.left!=null){
            dfs(root.left,path,list);
        }
        if(root.right!=null){
            dfs(root.right,path,list);
        }
        return list;
    }
    void dfs(TreeNode curr,String path,List<String> list){
        path += "->"+curr.val;
        if(curr.left==null && curr.right==null){
            list.add(path);
        }
        if(curr.left!=null){
            dfs(curr.left,path,list);
        }
        if(curr.right!=null){
            dfs(curr.right,path,list);
        }
    }
}
