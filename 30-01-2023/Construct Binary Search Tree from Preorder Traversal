// Construct Binary Search Tree from Preorder Traversal

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        return bst(preorder,new int[]{0},Integer.MAX_VALUE);
    }
    TreeNode bst(int[] preorder,int[] i,int upper){
        if(i[0]==preorder.length || preorder[i[0]]>upper){
            return null;
        }
        TreeNode root = new TreeNode(preorder[i[0]++]);
        root.left = bst(preorder,i,root.val);
        root.right = bst(preorder,i,upper);
        return root;
    }
}
